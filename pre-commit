#!/usr/bin/env ruby

# Git pre-commit hook that catches errors that I commonly make.
#
# To intentionally ignore the hook (i.e., when adding an alert call), commit
# from the command line with "--no-verify"
#
# Loosely based on Henrik Nyh's <http://henrik.nyh.se> work (2011-10-08)
# under the MIT License.
#
# Bob Gilmore (dev@bobgilmore.name)

def project_type
  toplevel = `git rev-parse --show-toplevel`.strip
  gemfile = File.join(toplevel, 'Gemfile')
  return 'ruby' if File.exist?(gemfile)
  package_json = File.join(toplevel, 'package.json')
  return 'node' if File.exist?(package_json)
  return nil
end


############# CONFIGURATION

# The two sections of regular expressions below ("forbidden" and "warning")
# will trigger a commit failure, *if* they are found on an added or edited line.

# "Forbidden" regular expressions
FORBIDDEN = [
  /TMP_DEBUG/, # My TextExpander macros for embedding debug code always include this for easy scanning.
  />>>>>>/,    # Git conflict markers
  /<<<<<</,    # ''
  /binding\.pry/,        # pry debugging code
  /binding\.remote_pry/, # ''
  /save_and_open_page/,  # Launchy debugging code
  /debugger/             # Ruby debugging code
]

FORBIDDEN_EXCEPT_IN_FILES = [
  [ /====/, ['.md', '.mmd'] ]
]

FORBIDDEN_EXCEPT_IN_NODE = [
  /console\.\w*/,  # JavaScript debug code that would break IE.
]

USER = ENV["USER"]
USER_HOME = [
  Regexp.new("/home/#{USER}"),        # Hard-coded path to user's HOME
  Regexp.new("/Users/#{USER}"),       # ''
  Regexp.new("/export/home/#{USER}")  # '' (for a current work config)
]

# Warning signs that someone is committing a private key
PRIVATE_KEY = [
  /PRIVATE KEY/,
  /ssh-rsa/
]

# Things that I probably don't want to commit.
# Will force a rejection, but will "label" them in the error message
# as "merely" warnings.
WARNING = [
  /logger\.debug/  # I almost never want to commit a (Ruby) call to logger.debug.  error, message, etc., but not debug.
]

# For particular projects - configurable on a per-project git config basis

# Check to ensure that if you add JavaScript or CSS, you change production.rb.  This is required by one of my employers.
NEW_ASSETS_REQUIRE_PRODUCTION_CHANGE_UNDEFINED = `git config hooks.newassetsrequireproductionchange`.strip.empty?
NEW_ASSETS_REQUIRE_PRODUCTION_CHANGE = NEW_ASSETS_REQUIRE_PRODUCTION_CHANGE_UNDEFINED || (`git config hooks.newassetsrequireproductionchange`.strip == 'true')

# Prevent inadvertent .ruby-version and .rbenv-version commits.  I rarely edit these files, so any attempt to commit is probably an accident.
ALLOW_RUBY_VERSION_CHANGES_UNDEFINED = `git config hooks.allowrubyversionchange`.strip.empty?
ALLOW_RUBY_VERSION_CHANGES = !ALLOW_RUBY_VERSION_CHANGES_UNDEFINED && ( `git config hooks.allowrubyversionchange`.strip == 'true')

# Check that we don't use spaces after opening braces or before closing braces.  This is required by one of my employers.
REQUIRE_PEDANTIC_PAREN_SPACING_UNDEFINED = `git config hooks.requirepedanticparenspacing`.strip.empty?
REQUIRE_PEDANTIC_PAREN_SPACING = REQUIRE_PEDANTIC_PAREN_SPACING_UNDEFINED || (`git config hooks.requirepedanticparenspacing`.strip == 'true')

FLASH = /flash\s*\[\s*:alert\s*\]/
ALERT = /alert/

OPEN_SMOOTH_SPACE  = /\([ \t]+/
SPACE_CLOSE_SMOOTH = /[ \t]+\)/
OPEN_SQUARE_SPACE  = /\[[ \t]+/
SPACE_CLOSE_SQUARE = /[ \t]+\]/

PROJECT_TYPE = project_type

############# END OF CONFIGURATION

# Check for "forbidden" and "warning" strings

# Loop over ALL errors and warnings and return ALL problems.
# I want to report on *all* problems that exist in the commit before aborting,
# so that anyone calling --no-verify has been informed of all problems first.
error_found = false

full_diff = `git diff --cached --`

full_diff.scan(%r{^\+\+\+ b/(.+)\n@@.*\n([\s\S]*?)(?:^diff|\z)}).each do |file, diff|
  changed_code_for_file = diff.split("\n").select { |x| x.start_with?("+") }.join("\n")
  changed_lines_for_file = diff.split("\n").select { |x| x.start_with?("+") }
  dir = File.dirname(file)

  # Scan for "forbidden" calls
  FORBIDDEN.each do |re|
    if changed_code_for_file.match(re)
      puts %{Error: git pre-commit hook forbids committing "#{$1 || $&}" to #{file}\n--------------}
      error_found = true
    end
  end

  # Scan for "forbidden except in node" calls
  unless PROJECT_TYPE == 'node'
    FORBIDDEN_EXCEPT_IN_NODE.each do |re|
      if changed_code_for_file.match(re)
        puts %{Error: git pre-commit hook forbids committing "#{$1 || $&}" to #{file} outside of Node.js projects. If this *is* a Node project, run}
        puts %{\nnpm init\n\nat the top level of the project to add a package.json file. See\nhttps://devcenter.heroku.com/articles/getting-started-with-nodejs#declare-dependencies-with-npm\nfor more information.}
        puts %{--------------}
        error_found = true
      end
    end
  end

  FORBIDDEN_EXCEPT_IN_FILES.each do |re_exts|
    unless re_exts[1].include? File.extname(file)
      re = re_exts[0]
      if changed_code_for_file.match(re)
        puts %{Error: git pre-commit hook forbids committing "#{$1 || $&}" to #{file}\n--------------}
        error_found = true
      end
    end
  end

  # Scan for probable HARD_CODED references to user's home directory
  USER_HOME.each do |re|
    if changed_code_for_file.match(re)
      puts %{Error: git pre-commit hook forbids committing what looks like a hard-coded home dir: "#{$1 || $&}" to #{file}\n--------------}
      error_found = true
    end
  end

  # Scan for private key indicators
  PRIVATE_KEY.each do |re|
    if changed_code_for_file.match(re)
      puts %{Error: git pre-commit hook detected a probable private key commit: "#{$1 || $&}" to #{file}\n--------------}
      error_found = true
    end
  end

  # Scan for "suspect" calls in files that *aren't* in assets or vendor
  WARNING.each do |re|
    unless /assets\// =~ dir && /\/vendor/ =~ dir
      if changed_code_for_file.match(re)
        puts %{Warning: git pre-commit hook is suspicious of committing lines with "#{$1 || $&}" to #{file}\n--------------}
        error_found = true
      end
    end
  end

  # Scan for calls to "alert" that aren't flashes, in files that *aren't* in assets/**/vendor
  unless /assets\// =~ dir && /\/vendor/ =~ dir
    changed_lines_for_file.each do |changed_line|
      if changed_line.match(ALERT) && !changed_line.match(FLASH)
        puts %{Warning: git pre-commit hook is suspicious of committing lines with "alert" to #{file}\n--------------}
        error_found = true
        break
      end
    end
  end

  # Scan for bad paren or square bracket spacing, in files that *aren't* in assets/**/vendor
  if !(/assets\// =~ dir && /\/vendor/ =~ dir) && REQUIRE_PEDANTIC_PAREN_SPACING
    if changed_code_for_file.match(OPEN_SMOOTH_SPACE)
      puts %{Warning: git pre-commit hook is suspicious of committing lines with "( " to #{file}\nThis may be OK, or not, depending on your project requirements.\n\nTo permanently allow this for this repo, run\ngit config hooks.requirepedanticparenspacing false\nand try again.\n\nTo permanently allow this for *all* repos, run\ngit config --global hooks.requirepedanticparenspacing false\nand try again.\n--------------}
      error_found = true
    end
    if changed_code_for_file.match(SPACE_CLOSE_SMOOTH)
      puts %{Warning: git pre-commit hook is suspicious of committing lines with " )" to #{file}\nThis may be OK, or not, depending on your project requirements.\n\nTo permanently allow this for this repo, run\ngit config hooks.requirepedanticparenspacing false\nand try again.\n\nTo permanently allow this for *all* repos, run\ngit config --global hooks.requirepedanticparenspacing false\nand try again.\n--------------}
      error_found = true
    end
    if changed_code_for_file.match(OPEN_SQUARE_SPACE)
      puts %{Warning: git pre-commit hook is suspicious of committing lines with "[ " to #{file}\nThis may be OK, or not, depending on your project requirements.\n\nTo permanently allow this for this repo, run\ngit config hooks.requirepedanticparenspacing false\nand try again.\n\nTo permanently allow this for *all* repos, run\ngit config --global hooks.requirepedanticparenspacing false\nand try again.\n--------------}
      error_found = true
    end
    if changed_code_for_file.match(SPACE_CLOSE_SQUARE)
      puts %{Warning: git pre-commit hook is suspicious of committing lines with " ]" to #{file}\nThis may be OK, or not, depending on your project requirements.\n\nTo permanently allow this for this repo, run\ngit config hooks.requirepedanticparenspacing false\nand try again.\n\nTo permanently allow this for *all* repos, run\ngit config --global hooks.requirepedanticparenspacing false\nand try again.\n--------------}
      error_found = true
    end
  end

end

=begin
# Syntax check .rb files.
toplevel = `git rev-parse --show-toplevel`
name_only = `git diff --cached --name-only`
name_only.split(/\n/).each do |fil|
  if File.extname(fil) == '.rb'
    fullfile = File.join(toplevel.strip, fil)
    if File.exist?(fullfile)
      output = `ruby -c #{fullfile}`
      status = $?.success?
      unless status
        puts %{Error: git pre-commit hook found a syntax error in #{file}}
        error_found = true
      end
    end
  end
end
=end

name_only = `git diff --cached --name-only`

# Ensure that production.rb is changed when assets are added
if NEW_ASSETS_REQUIRE_PRODUCTION_CHANGE
  name_only_added = `git diff --cached --name-only --diff-filter=A`
  has_production = name_only.include?('production.rb')
  name_only_added.split(/\n/).each do |fil|
    ext = File.extname(fil)
    if (ext == '.css' || ext == '.scss' || ext == '.js' || ext == '.coffee' || ext == '.less') && !has_production
      puts %{Error: git pre-commit hook found attempt to add #{fil} without editing production.rb\nThis may be OK, or not, depending on your project requirements.\n\nTo permanently allow this for this repo, run\ngit config hooks.newassetsrequireproductionchange false\nand try again.\n\nTo permanently allow this for *all* repos, run\ngit config --global hooks.newassetsrequireproductionchange false\nand try again.\n-------------- }
      error_found = true
    end
  end
end

# Prevent changes to .ruby-version (and .rbenv-version)
unless ALLOW_RUBY_VERSION_CHANGES
  name_only.split(/\n/).each do |fil|
    base = File.basename(fil)
    if base == '.ruby-version' || base == '.rbenv-version'
      puts %{Warning: git pre-commit hook found attempt to edit #{fil}.\nThis may be OK, or not, depending on your project requirements.\n\nTo permanently allow this for this repo, run\ngit config hooks.allowrubyversionchange true\nand try again.\n\nTo permanently allow it for *all* repos, run\ngit config --global hooks.allowrubyversionchange true\nand try again.\n-------------- }
      error_found = true
    end
  end
end

# Finally, report errors
if error_found
  puts "To commit anyway, use --no-verify"
  exit 1
end
